[{"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\index.js":"1","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\App.js":"2","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\reportWebVitals.js":"3","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\pages\\Home.js":"4","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\pages\\EditorPage.js":"5","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\components\\Client.js":"6","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\components\\editor.js":"7","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\components\\Editor.js":"8","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\socket.js":"9","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\Actions.js":"10"},{"size":503,"mtime":1659012094071,"results":"11","hashOfConfig":"12"},{"size":730,"mtime":1658982661961,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1658978856030,"results":"14","hashOfConfig":"12"},{"size":2238,"mtime":1658984235406,"results":"15","hashOfConfig":"12"},{"size":3360,"mtime":1659014448789,"results":"16","hashOfConfig":"12"},{"size":321,"mtime":1658985347873,"results":"17","hashOfConfig":"12"},{"size":863,"mtime":1658999730922,"results":"18","hashOfConfig":"12"},{"size":1596,"mtime":1659014387458,"results":"19","hashOfConfig":"12"},{"size":296,"mtime":1659006097842,"results":"20","hashOfConfig":"12"},{"size":210,"mtime":1659007405318,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4kf1vv",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\index.js",[],[],"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\App.js",[],[],[],"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\reportWebVitals.js",[],[],"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\pages\\Home.js",["56"],[],"import React, { useState } from \"react\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const navigate = useNavigate();\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  const createNewRoom = (e) => {\r\n    e.preventDefault();\r\n    const id = uuidV4();\r\n    setRoomId(id);\r\n    toast.success(\"Created a new room\");\r\n  };\r\n\r\n  const joinRoom = () => {\r\n    if (!roomId || !username) {\r\n      toast.error(\"ROOM ID & username is required\");\r\n      return;\r\n    }\r\n    navigate(`/editor/${roomId}`, {\r\n        state: {\r\n            username,\r\n        },\r\n    })\r\n  };\r\n\r\n  const handleInputEnter = (e) => {\r\n    if(e.code === \"Enter\"){\r\n        joinRoom();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"homePageWrapper\">\r\n      <div className=\"formWrapper\">\r\n        <img\r\n          className=\"homePageLogo\"\r\n          src=\"/code-sync.png\"\r\n          alt=\"code-sync-logo\"\r\n        />\r\n        <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\r\n        <div className=\"inputGroup\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"inputBox\"\r\n            placeholder=\"ROOM ID\"\r\n            onChange={(e) => setRoomId(e.target.value)}\r\n            value={roomId}\r\n            onKeyUp={handleInputEnter}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            className=\"inputBox\"\r\n            placeholder=\"USERNAME\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            value={username}\r\n            onKeyUp={handleInputEnter}\r\n          />\r\n          <button className=\"btn joinBtn\" onClick={joinRoom}>\r\n            Join\r\n          </button>\r\n          <span className=\"createInfo\">\r\n            If you don't have an invite then create &nbsp;\r\n            <a onClick={createNewRoom} href=\"\" className=\"createNewBtn\">\r\n              new room\r\n            </a>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <h4>\r\n          Built with ðŸ’› by &nbsp;{\" \"}\r\n          <a href=\"https://github.com/aashishbansal23\">Aashish Bansal</a>\r\n        </h4>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\pages\\EditorPage.js",["57"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport ACTIONS from \"../Actions\";\r\nimport Client from \"../components/Client\";\r\nimport Editor from \"../components/Editor\";\r\nimport { initSocket } from \"../socket\";\r\nimport {\r\n  useLocation,\r\n  useNavigate,\r\n  Navigate,\r\n  useParams,\r\n} from \"react-router-dom\";\r\n\r\nconst EditorPage = () => {\r\n  const socketRef = useRef(null);\r\n  const location = useLocation();\r\n  const reactNavigator = useNavigate();\r\n  const codeRef = useRef(null);\r\n  const { roomId } = useParams();\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      socketRef.current = await initSocket();\r\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\r\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\r\n\r\n      function handleErrors(e) {\r\n        console.log(\"socket error\", e);\r\n        toast.error(\"Socket connection failed, try again later.\");\r\n        reactNavigator(\"/\");\r\n      }\r\n\r\n      socketRef.current.emit(ACTIONS.JOIN, {\r\n        roomId,\r\n        username: location.state?.username,\r\n      });\r\n\r\n      socketRef.current.on(\r\n        ACTIONS.JOINED,\r\n        ({ clients, username, socketId }) => {\r\n          if (username !== location.state?.username) {\r\n            toast.success(`${username} joined the room.`);\r\n            console.log(`${username} joined`);\r\n          }\r\n          setClients(clients);\r\n          socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n            code: codeRef.current,\r\n            socketId,\r\n          });\r\n        }\r\n      );\r\n\r\n      socketRef.current.on(ACTIONS.DISCONNECTED, ({ socketId, username }) => {\r\n        toast.success(`${username} left the room.`);\r\n        setClients((prev) => {\r\n          return prev.filter((client) => client.socketId !== socketId);\r\n        });\r\n      });\r\n    };\r\n    init();\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n      socketRef.current.off(ACTIONS.JOINED);\r\n      socketRef.current.off(ACTIONS.DISCONNECTED);\r\n    };\r\n  }, []);\r\n\r\n  async function copyRoomId() {\r\n    try {\r\n      await navigator.clipboard.writeText(roomId);\r\n      toast.success('Room ID has been copied to your clipboard')\r\n    } catch (err) {\r\n      toast.error('Could not copy the Room ID');\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  function leaveRoom() {\r\n    reactNavigator('/');\r\n  }\r\n\r\n  if (!location.state) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"mainWrap\">\r\n      <div className=\"aside\">\r\n        <div className=\"asideInner\">\r\n          <div className=\"logo\">\r\n            <img className=\"logoImage\" src=\"/code-sync.png\" alt=\"logo\" />\r\n          </div>\r\n          <h3>Connected</h3>\r\n          <div className=\"clientsList\">\r\n            {clients.map((client) => (\r\n              <Client key={client.socketId} username={client.username} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button className=\"btn copyBtn\" onClick={copyRoomId}>Copy ROOM ID</button>\r\n        <button className=\"btn leaveBtn\" onClick={leaveRoom}>Leave</button>\r\n      </div>\r\n      <div className=\"editorWrap\">\r\n        <Editor socketRef={socketRef} roomId={roomId} onCodeChange={(code) => {codeRef.current = code}} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditorPage;\r\n","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\components\\Client.js",[],[],"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\components\\editor.js",[],[],"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\components\\Editor.js",["58","59","60"],[],"import React, { useEffect, useRef } from \"react\";\r\nimport Codemirror from \"codemirror\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/dracula.css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/addon/edit/closetag\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport ACTIONS from \"../Actions\";\r\n\r\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\r\n  const editorRef = useRef(null);\r\n  useEffect(() => {\r\n    async function init() {\r\n      editorRef.current = Codemirror.fromTextArea(\r\n        document.getElementById(\"realtimeEditor\"),\r\n        {\r\n          mode: { name: \"javascript\", json: true },\r\n          theme: \"dracula\",\r\n          autoCloseTags: true,\r\n          autoCloseBrackets: true,\r\n          lineNumbers: true,\r\n        }\r\n      );\r\n\r\n      editorRef.current.on(\"change\", (instance, changes) => {\r\n        const { origin } = changes;\r\n        const code = instance.getValue();\r\n        onCodeChange(code);\r\n        if (origin !== \"setValue\") {\r\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\r\n            roomId,\r\n            code,\r\n          });\r\n        }\r\n      });\r\n    }\r\n    init();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (socketRef.current) {\r\n      socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\r\n        if (code !== null) {\r\n          editorRef.current.setValue(code);\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      socketRef.current.off(ACTIONS.CODE_CHANGE);\r\n    };\r\n  }, [socketRef.current]);\r\n\r\n  return <textarea id=\"realtimeEditor\"></textarea>;\r\n};\r\n\r\nexport default Editor;\r\n","C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\socket.js",[],[],"C:\\Users\\new\\Desktop\\Self_Learning\\Real Time Code Editor\\realtime-editor\\src\\Actions.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":67,"column":13,"nodeType":"63","endLine":67,"endColumn":73},{"ruleId":"64","severity":1,"message":"65","line":68,"column":6,"nodeType":"66","endLine":68,"endColumn":8,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":38,"column":6,"nodeType":"66","endLine":38,"endColumn":8,"suggestions":"69"},{"ruleId":"64","severity":1,"message":"70","line":49,"column":17,"nodeType":"71","endLine":49,"endColumn":24},{"ruleId":"64","severity":1,"message":"72","line":51,"column":6,"nodeType":"66","endLine":51,"endColumn":25,"suggestions":"73"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["74"],"React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["75"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["76"],{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"83","text":"84"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"85","text":"86"},"Update the dependencies array to be: [socketRef]",{"range":"87","text":"88"},[2093,2095],"[location.state?.username, reactNavigator, roomId]",[1176,1178],"[onCodeChange, roomId, socketRef]",[1488,1507],"[socketRef]"]
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\new\\\\Desktop\\\\Self_Learning\\\\Real Time Code Editor\\\\realtime-editor\\\\src\\\\pages\\\\EditorPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorPage = () => {\n  _s();\n\n  const socketRef = useRef(null);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n\n      socketRef.current = await initSocket();\n      socketRef.current.on('connect_error', err => handleErrors(err));\n      socketRef.current.on('connect_failed', err => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log('socket error', e);\n        toast.error('Socket connection failed, try again later.');\n        reactNavigator('/');\n      }\n\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      }); // Listening for joined event\n\n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n\n        setClients(clients);\n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      }); // Listening for disconnected\n\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          return prev.filter(client => client.socketId !== socketId);\n        });\n      });\n    };\n\n    init();\n    return () => {\n      socketRef.current.disconnect();\n      socketRef.current.off(ACTIONS.JOINED);\n      socketRef.current.off(ACTIONS.DISCONNECTED);\n    };\n  }, []); /////////////////////\n  // const codeRef = useRef(null);\n  // const location = useLocation();\n  // const { roomId } = useParams();\n  // const reactNavigator = useNavigate();\n\n  const [clients, setClients] = useState([{\n    socketId: 1,\n    username: \"Aashish B\"\n  }, {\n    socketId: 2,\n    username: \"Rakesh B\"\n  }, {\n    socketId: 3,\n    username: \"Kaku B\"\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/code-sync.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditorPage, \"qcTaYl6PBeU2lKf0nkKU5EJ3VBs=\");\n\n_c = EditorPage;\nexport default EditorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useState","Client","Editor","EditorPage","socketRef","useRef","useEffect","init","current","initSocket","on","err","handleErrors","e","console","log","toast","error","reactNavigator","emit","ACTIONS","JOIN","roomId","username","location","state","JOINED","clients","socketId","success","setClients","SYNC_CODE","code","codeRef","DISCONNECTED","prev","filter","client","disconnect","off","map"],"sources":["C:/Users/new/Desktop/Self_Learning/Real Time Code Editor/realtime-editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Client from \"../components/Client\";\r\nimport Editor from \"../components/Editor\";\r\n\r\nconst EditorPage = () => {\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n        socketRef.current = await initSocket();\r\n        socketRef.current.on('connect_error', (err) => handleErrors(err));\r\n        socketRef.current.on('connect_failed', (err) => handleErrors(err));\r\n\r\n        function handleErrors(e) {\r\n            console.log('socket error', e);\r\n            toast.error('Socket connection failed, try again later.');\r\n            reactNavigator('/');\r\n        }\r\n\r\n        socketRef.current.emit(ACTIONS.JOIN, {\r\n            roomId,\r\n            username: location.state?.username,\r\n        });\r\n\r\n        // Listening for joined event\r\n        socketRef.current.on(\r\n            ACTIONS.JOINED,\r\n            ({ clients, username, socketId }) => {\r\n                if (username !== location.state?.username) {\r\n                    toast.success(`${username} joined the room.`);\r\n                    console.log(`${username} joined`);\r\n                }\r\n                setClients(clients);\r\n                socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n                    code: codeRef.current,\r\n                    socketId,\r\n                });\r\n            }\r\n        );\r\n\r\n        // Listening for disconnected\r\n        socketRef.current.on(\r\n            ACTIONS.DISCONNECTED,\r\n            ({ socketId, username }) => {\r\n                toast.success(`${username} left the room.`);\r\n                setClients((prev) => {\r\n                    return prev.filter(\r\n                        (client) => client.socketId !== socketId\r\n                    );\r\n                });\r\n            }\r\n        );\r\n    };\r\n    init();\r\n    return () => {\r\n        socketRef.current.disconnect();\r\n        socketRef.current.off(ACTIONS.JOINED);\r\n        socketRef.current.off(ACTIONS.DISCONNECTED);\r\n    };\r\n  }, []);/////////////////////\r\n\r\n  // const codeRef = useRef(null);\r\n  // const location = useLocation();\r\n  // const { roomId } = useParams();\r\n  // const reactNavigator = useNavigate();\r\n  const [clients, setClients] = useState([\r\n    { socketId: 1, username: \"Aashish B\" },\r\n    { socketId: 2, username: \"Rakesh B\" },\r\n    { socketId: 3, username: \"Kaku B\" },\r\n  ]);\r\n  return (\r\n    <div className=\"mainWrap\">\r\n      <div className=\"aside\">\r\n        <div className=\"asideInner\">\r\n          <div className=\"logo\">\r\n            <img className=\"logoImage\" src=\"/code-sync.png\" alt=\"logo\" />\r\n          </div>\r\n          <h3>Connected</h3>\r\n          <div className=\"clientsList\">\r\n            {clients.map((client) => (\r\n              <Client key={client.socketId} username={client.username} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button className=\"btn copyBtn\">Copy ROOM ID</button>\r\n        <button className=\"btn leaveBtn\">Leave</button>\r\n      </div>\r\n      <div className=\"editorWrap\">\r\n        <Editor />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditorPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\new\\\\Desktop\\\\Self_Learning\\\\Real Time Code Editor\\\\realtime-editor\\\\src\\\\pages\\\\EditorPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport ACTIONS from \"../Actions\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport { useLocation, useNavigate, Navigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorPage = () => {\n  _s();\n\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const reactNavigator = useNavigate(); // const codeRef = useRef(null);\n\n  const {\n    roomId\n  } = useParams();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n\n      socketRef.current = await initSocket();\n      socketRef.current.on(\"connect_error\", err => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", err => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log(\"socket error\", e);\n        toast.error(\"Socket connection failed, try again later.\");\n        reactNavigator(\"/\");\n      }\n\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      });\n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n\n        setClients(clients); // socketRef.current.emit(ACTIONS.SYNC_CODE, {\n        //   code: codeRef.current,\n        //   socketId,\n        // });\n      });\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          return prev.filter(client => client.socketId !== socketId);\n        });\n      });\n    };\n\n    init();\n    return () => {\n      socketRef.current.disconnect();\n      socketRef.current.off(ACTIONS.JOINED);\n      socketRef.current.off(ACTIONS.DISCONNECTED);\n    };\n  }, []);\n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success('Room ID has been copied to your clipboard');\n    } catch (err) {\n      toast.error('Could not copy the Room ID');\n      console.log(err);\n    }\n  }\n\n  function leaveRoom() {}\n\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/code-sync.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        socketRef: socketRef,\n        roomId: roomId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditorPage, \"zG5knFIz1L0M5DvCNHvTrPCWOos=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n\n_c = EditorPage;\nexport default EditorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","toast","ACTIONS","Client","Editor","initSocket","useLocation","useNavigate","Navigate","useParams","EditorPage","socketRef","location","reactNavigator","roomId","clients","setClients","init","current","on","err","handleErrors","e","console","log","error","emit","JOIN","username","state","JOINED","socketId","success","DISCONNECTED","prev","filter","client","disconnect","off","copyRoomId","navigator","clipboard","writeText","leaveRoom","map"],"sources":["C:/Users/new/Desktop/Self_Learning/Real Time Code Editor/realtime-editor/src/pages/EditorPage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport ACTIONS from \"../Actions\";\r\nimport Client from \"../components/Client\";\r\nimport Editor from \"../components/Editor\";\r\nimport { initSocket } from \"../socket\";\r\nimport {\r\n  useLocation,\r\n  useNavigate,\r\n  Navigate,\r\n  useParams,\r\n} from \"react-router-dom\";\r\n\r\nconst EditorPage = () => {\r\n  const socketRef = useRef(null);\r\n  const location = useLocation();\r\n  const reactNavigator = useNavigate();\r\n  // const codeRef = useRef(null);\r\n  const { roomId } = useParams();\r\n\r\n  const [clients, setClients] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      socketRef.current = await initSocket();\r\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\r\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\r\n\r\n      function handleErrors(e) {\r\n        console.log(\"socket error\", e);\r\n        toast.error(\"Socket connection failed, try again later.\");\r\n        reactNavigator(\"/\");\r\n      }\r\n\r\n      socketRef.current.emit(ACTIONS.JOIN, {\r\n        roomId,\r\n        username: location.state?.username,\r\n      });\r\n\r\n      socketRef.current.on(\r\n        ACTIONS.JOINED,\r\n        ({ clients, username, socketId }) => {\r\n          if (username !== location.state?.username) {\r\n            toast.success(`${username} joined the room.`);\r\n            console.log(`${username} joined`);\r\n          }\r\n          setClients(clients);\r\n          // socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n          //   code: codeRef.current,\r\n          //   socketId,\r\n          // });\r\n        }\r\n      );\r\n\r\n      socketRef.current.on(ACTIONS.DISCONNECTED, ({ socketId, username }) => {\r\n        toast.success(`${username} left the room.`);\r\n        setClients((prev) => {\r\n          return prev.filter((client) => client.socketId !== socketId);\r\n        });\r\n      });\r\n    };\r\n    init();\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n      socketRef.current.off(ACTIONS.JOINED);\r\n      socketRef.current.off(ACTIONS.DISCONNECTED);\r\n    };\r\n  }, []);\r\n\r\n  async function copyRoomId() {\r\n    try {\r\n      await navigator.clipboard.writeText(roomId);\r\n      toast.success('Room ID has been copied to your clipboard')\r\n    } catch (err) {\r\n      toast.error('Could not copy the Room ID');\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  function leaveRoom() {\r\n    \r\n  }\r\n\r\n  if (!location.state) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"mainWrap\">\r\n      <div className=\"aside\">\r\n        <div className=\"asideInner\">\r\n          <div className=\"logo\">\r\n            <img className=\"logoImage\" src=\"/code-sync.png\" alt=\"logo\" />\r\n          </div>\r\n          <h3>Connected</h3>\r\n          <div className=\"clientsList\">\r\n            {clients.map((client) => (\r\n              <Client key={client.socketId} username={client.username} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button className=\"btn copyBtn\" onClick={copyRoomId}>Copy ROOM ID</button>\r\n        <button className=\"btn leaveBtn\" onClick={leaveRoom}>Leave</button>\r\n      </div>\r\n      <div className=\"editorWrap\">\r\n        <Editor socketRef={socketRef} roomId={roomId} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditorPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}